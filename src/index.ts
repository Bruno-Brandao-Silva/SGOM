import { app, BrowserWindow, dialog, ipcMain } from 'electron';
import fs from 'fs';
import PdfPrinter from 'pdfmake';

import database from './models/Database';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	app.quit();
}

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 900,
		width: 1200,
		autoHideMenuBar: true,
		webPreferences: {
			webSecurity: true,
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});
	mainWindow.maximize();

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	mainWindow.webContents.openDevTools();

	ipcMain.handle('database', (event, arg) => database(arg));

	ipcMain.handle("chooseFile", async (event, arg) => {
		const result = await dialog.showOpenDialog({
			properties: ["openFile"],
			filters: [{ name: "Images", extensions: ["png", "jpg", "jpeg"] }]
		});
		const dir = __dirname + "\\..\\renderer\\public\\images\\products\\";
		if (!fs.existsSync(dir)) {
			fs.mkdirSync(dir);
		}
		const response: string[] = [];
		result.filePaths.forEach((path) => {
			const filename = `${Date.now()}-${path.split("\\").pop()}`
			fs.copyFileSync(path, dir + filename);
			response.push(filename);
		});

		return response;
	});

	ipcMain.handle("pdfCreator", async (event, arg: { docDefinition: TDocumentDefinitions, docName: string, dir: string, options?: BufferOptions }) => {
		try {
			const dir = "pdfs\\" + arg.dir + "\\";
			const fonts = {
				Courier: {
					normal: 'Courier',
					bold: 'Courier-Bold',
					italics: 'Courier-Oblique',
					bolditalics: 'Courier-BoldOblique'
				},
				Helvetica: {
					normal: 'Helvetica',
					bold: 'Helvetica-Bold',
					italics: 'Helvetica-Oblique',
					bolditalics: 'Helvetica-BoldOblique'
				},
				Times: {
					normal: 'Times-Roman',
					bold: 'Times-Bold',
					italics: 'Times-Italic',
					bolditalics: 'Times-BoldItalic'
				},
				Symbol: {
					normal: 'Symbol'
				},
				ZapfDingbats: {
					normal: 'ZapfDingbats'
				}
			};

			if (!fs.existsSync("pdfs")) fs.mkdirSync("pdfs");
			if (!fs.existsSync(dir)) fs.mkdirSync(dir);

			let printer = new PdfPrinter(fonts);
			let pdfDoc = printer.createPdfKitDocument(arg.docDefinition, arg.options);
			pdfDoc.pipe(fs.createWriteStream(dir + arg.docName + '.pdf'));
			pdfDoc.end();
			return true
		} catch (error) { return false }
	});
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.