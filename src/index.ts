import { app, BrowserWindow, MessageBoxReturnValue, dialog, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 900,
        width: 1200,
        thickFrame: true,
        webPreferences: {
            webSecurity: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
    });
    mainWindow.maximize();
    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();

    ipcMain.handle('newDialog', async (event: any, arg: any) => {
        let options: Electron.MessageBoxOptions = { ...arg }
        const response = await dialog.showMessageBox(mainWindow, options).then((value: MessageBoxReturnValue) => {
            return value
        })
        return response
    })

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// ipcMain.on("saveContent", (e, content) =>{
//   saveContent(content);
// });

// import PDFDocument from 'pdfkit';
// import fs from 'fs';
// const doc = new PDFDocument();

// doc.pipe(fs.createWriteStream('output.pdf'));

// // Embed a font, set the font size, and render some text
// doc
//     .fontSize(25)
//     .text('Some text with an embedded font!', 100, 100);

// // Add an image, constrain it to a given size, and center it vertically and horizontally

// // Add another page
// doc
//     .addPage()
//     .fontSize(25)
//     .text('Here is some vector graphics...', 100, 100);

// // Draw a triangle
// doc
//     .save()
//     .moveTo(100, 150)
//     .lineTo(100, 250)
//     .lineTo(200, 250)
//     .fill('#FF3300');

// // Apply some transforms and render an SVG path with the 'even-odd' fill rule
// doc
//     .scale(0.6)
//     .translate(470, -380)
//     .path('M 250,75 L 323,301 131,161 369,161 177,301 z')
//     .fill('red', 'even-odd')
//     .restore();

// // Add some text with annotations
// doc
//     .addPage()
//     .fillColor('blue')
//     .text('Here is a link!', 100, 100)
//     .underline(100, 100, 160, 27, { color: '#0000FF' })
//     .link(100, 100, 160, 27, 'http://google.com/');

// // Finalize PDF file
// doc.end();
